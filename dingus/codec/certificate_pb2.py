# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: certificate.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x11\x63\x65rtificate.proto\"\x98\x01\n\x0b\x43\x65rtificate\x12\x12\n\nownChainID\x18\x01 \x02(\x0c\x12\x0f\n\x07ownName\x18\x02 \x02(\t\x12=\n\x13mainchainValidators\x18\x03 \x03(\x0b\x32 .Certificate_MainchainValidators\x12%\n\x1dmainchainCertificateThreshold\x18\x04 \x02(\x04\"D\n\x1f\x43\x65rtificate_MainchainValidators\x12\x0e\n\x06\x62lsKey\x18\x01 \x02(\x0c\x12\x11\n\tbftWeight\x18\x02 \x02(\x04')



_CERTIFICATE = DESCRIPTOR.message_types_by_name['Certificate']
_CERTIFICATE_MAINCHAINVALIDATORS = DESCRIPTOR.message_types_by_name['Certificate_MainchainValidators']
Certificate = _reflection.GeneratedProtocolMessageType('Certificate', (_message.Message,), {
  'DESCRIPTOR' : _CERTIFICATE,
  '__module__' : 'certificate_pb2'
  # @@protoc_insertion_point(class_scope:Certificate)
  })
_sym_db.RegisterMessage(Certificate)

Certificate_MainchainValidators = _reflection.GeneratedProtocolMessageType('Certificate_MainchainValidators', (_message.Message,), {
  'DESCRIPTOR' : _CERTIFICATE_MAINCHAINVALIDATORS,
  '__module__' : 'certificate_pb2'
  # @@protoc_insertion_point(class_scope:Certificate_MainchainValidators)
  })
_sym_db.RegisterMessage(Certificate_MainchainValidators)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _CERTIFICATE._serialized_start=22
  _CERTIFICATE._serialized_end=174
  _CERTIFICATE_MAINCHAINVALIDATORS._serialized_start=176
  _CERTIFICATE_MAINCHAINVALIDATORS._serialized_end=244
# @@protoc_insertion_point(module_scope)
